from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import os
import urllib.request

import tensorflow as tf
import numpy as np

FROTHY_TRAINING = "frothy_training.csv"
FROTHY_TEST = "frothy_test.csv"

# Load datasets.
training_set = tf.contrib.learn.datasets.base.load_csv_with_header(
	filename = FROTHY_TRAINING,
	target_dtype = np.int,
	features_dtype = np.float64
	)
test_set = tf.contrib.learn.datasets.base.load_csv_with_header(
	filename = FROTHY_TEST,
	target_dtype = np.int,
	features_dtype = np.float64
	)

feature_columns = [tf.feature_column.numeric_column("x", shape=[28])]

# DNNClassifier 
classifier = tf.estimator.DNNClassifier(feature_columns = feature_columns,
										hidden_units = [10, 20, 10],
										n_classes = 2,
										model_dir="/tmp/frothy_model")

#Define the training inputs 
train_input_fn = tf.estimator.inputs.numpy_input_fn(
	x={"x": np.array(training_set.data)},
	y=np.array(training_set.target),
	num_epochs=None,
	shuffle=True)

# Fit the DNNClassifier to the Frothy Training Data
classifier.train(input_fn = train_input_fn, steps=2000)

test_input_fn = tf.estimator.inputs.numpy_input_fn(
	x={"x": np.array(test_set.data)},
	y=np.array(test_set.target),
	num_epochs=1,
	shuffle=False)

# Fit the DNNClassifier to the Frothy Testing Data
accuracy_score = classifier.evaluate(input_fn=test_input_fn)["accuracy"]
print("\nPrediction Accuracy: {0:f}\n".format(accuracy_score))

# Classify two new samples.
new_samples = np.array(
    [[99.900001526,99.900001526,99.900001526,99.900001526,99.900001526,99.900001526,2.5641374588,17.119951248,7.7256150246,1.7872149944,0.94629216194,3.1009037495,99.900001526,99.900001526,99.900001526,99.900001526,99.900001526,99.900001526,2.9902200699,38.555904388,5.5810427666,3.9142663479,23.569248199,13.80287838,99.900001526,99.900001526,99.900001526,0.1602998],
[4.8014206886,13.807442665,5.1196918488,53.579189301,10.601888657,1.5841113329,99.900001526,99.900001526,99.900001526,1.4482884407,0.81551545858,3.3241829872,99.900001526,99.900001526,99.900001526,99.900001526,99.900001526,99.900001526,2.0403363705,46.298793793,5.1790761948,2.9460371078,25.245295881,15.142869995,2.0195021629,32.014976501,9.0407581329,1.3872520000000002],
[4.8014206886,13.807442665,5.1196918488,53.579189301,10.601888657,1.5841113329,99.900001526,99.900001526,99.900001526,1.4482884407,0.81551545858,3.3241829872,99.900001526,99.900001526,99.900001526,99.900001526,99.900001526,99.900001526,2.0403363705,46.298793793,5.1790761948,3.096133709,24.22284317,16.353883743,2.0195021629,32.014976501,9.0407581329,0.4154522],
[4.8014206886,13.807442665,5.1196918488,53.579189301,10.601888657,1.5841113329,99.900001526,99.900001526,99.900001526,1.4482884407,0.81551545858,3.3241829872,99.900001526,99.900001526,99.900001526,99.900001526,99.900001526,99.900001526,2.0403363705,46.298793793,5.1790761948,3.096133709,24.22284317,16.353883743,2.0195021629,32.014976501,9.0407581329,0.8614334000000001],
[4.8014206886,13.807442665,5.1196918488,50.124435425,12.974945068,3.7876467705,99.900001526,99.900001526,99.900001526,1.4482884407,0.69887006283,3.1843559742,99.900001526,99.900001526,99.900001526,99.900001526,99.900001526,99.900001526,2.0403363705,45.834720612,5.1790761948,2.9085242748,23.280195236,15.993596077,2.0195021629,30.756690979,9.7921142578,0.5193156],
[4.8014206886,13.807442665,5.1196918488,50.124435425,12.974945068,3.7876467705,99.900001526,99.900001526,99.900001526,1.4482884407,0.69887006283,3.1843559742,99.900001526,99.900001526,99.900001526,99.900001526,99.900001526,99.900001526,2.0403363705,45.834720612,5.1790761948,2.9085242748,23.280195236,15.993596077,2.0195021629,30.756690979,9.7921142578,0.9495796999999999]], dtype=np.float64)

predict_input_fn = tf.estimator.inputs.numpy_input_fn(
    x={"x": new_samples},
    num_epochs=1,
    shuffle=False)

predictions = list(classifier.predict(input_fn=predict_input_fn))
predicted_classes = [p["classes"] for p in predictions]

print(
    "New Samples, Class Predictions:    {}\n"
    .format(predicted_classes))